per#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar 19 17:18:18 2021

@author: Mitchell Thomas
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import pandas as pd
import geopandas as gp
from sklearn.linear_model import LinearRegression
from import_files import wfp_prices, GEIWS_prices, exchange_rates, get_ndvi_ts, get_precip_ts, get_flood_ts, get_enviro_ts


def get_rice_dict():
    # RICE price imports
    #----- prices from WFP data, senegal markets
    wfp_imported_rice_path = '/Users/Mitchell/SenegalAnalyses/SenegalCodes/pricedata/WFP_Senegal_importedrice.csv'
    senegal_wfp_dataframe, senegal_mkts_dict = wfp_prices(wfp_imported_rice_path, minimum_size = 0)
    mkts_dict = senegal_mkts_dict.copy()
    
    #WFP farafenni, basse, gambia:
    
    gambia_path = '/Users/Mitchell/SenegalAnalyses/SenegalCodes/pricedata/WFPFarafenniBasseLongGrain.csv'
    gambia_df, gambia_dict = wfp_prices(gambia_path, minimum_size = 0, combine = True)
    del gambia_dict['CombinedAverage']
    for key in gambia_dict.keys():
        mkts_dict[key] = gambia_dict[key]
    
    #---- WFP, banjul, Gambia
    banjul_path = '/Users/Mitchell/SenegalAnalyses/SenegalCodes/pricedata/WFP_2021Feb04_Gambia_FoodPricesData_LONGGRAIN.csv'
    banjul_df, banjul_dict = wfp_prices(banjul_path, minimum_size = 0, combine = True)
    mkts_dict['Banjul'] = banjul_dict['CombinedAverage']
    
    bissau_path = '/Users/Mitchell/SenegalAnalyses/SenegalCodes/pricedata/WFP_2021Feb04_Guinea-Bissau_FoodPricesData.csv'
    bissau_df, bissau_dict = wfp_prices(bissau_path, minimum_size = 0, combine = True)
    mkts_dict['Bisseau'] = bissau_dict['CombinedAverage']
    
    
    
    conakry_path = '/Users/Mitchell/SenegalAnalyses/SenegalCodes/pricedata/GuineaConakryAllMarkets.csv'
    conakry_df, conakry_dict = wfp_prices(conakry_path, minimum_size = 0, combine = True)
    mkts_dict['Conakry'] = bissau_dict['CombinedAverage']
    
    
    senegal_file = 'pricedata/SenegalRice10MarketsPrices2007to2020.csv'
    border_file = 'pricedata/SurroundingMarketsSenegalPrices.csv'
    international_file = 'pricedata/GEIWS_international_rice.csv'
    fao_senegal_rice_prices, fao_border_rice_prices, fao_international_rice_prices = GEIWS_prices(senegal_file),GEIWS_prices(border_file), GEIWS_prices(international_file)
    fao_mkts_dict = {}
    for df in fao_senegal_rice_prices, fao_border_rice_prices, fao_international_rice_prices:
        for column in df.columns:
            series = df[column]
            mkts_dict[column] = series
            fao_mkts_dict[column] = series
            
    return mkts_dict, fao_mkts_dict

def get_enviro_df(monthly_dev = True):
    ndvi_file = 'envirodata/NDVItwoRiceZones.csv'
    ndvi_dict =  get_enviro_ts(ndvi_file, 'NDVI',split_date = 'True', monthly_dev = monthly_dev)
    precip_file = 'envirodata/ChirpsMonthlySumsRiceZones.csv'
    precip_dict = get_enviro_ts(precip_file, 'precip', date_format = '%m_%d_%Y', monthly_dev  = monthly_dev)
    
    enviro_dict =  {**ndvi_dict, **precip_dict}
    enviro_df = pd.DataFrame.from_dict(enviro_dict)
    return enviro_df



#subtract by rolling mean
def subtract_rolling_mean(df, window_radius = 6):
    rolling_mean = df.rolling(window_radius*2 , center = True).mean(skipna = True)
    adjust_df = df - rolling_mean
    return adjust_df
# first differences over dataframe
def take_first_diff(df):
    if type(df) != pd.core.frame.DataFrame:
        df = pd.DataFrame(df)
    for x in range(len(df.columns)):
        df.iloc[:,x] = df.iloc[:,x] - df.iloc[:,x].shift(1)
    return df

# handle seasonality by subtracting monthly mean
def adjust_seasonality(df):
    for x in range(len(df.columns)):
        m = df.iloc[:,x].index.month
        mon_avg = []
        months = [i + 1 for i in range(12)]
        for mon in months:
            filt = df.iloc[:,x][m == mon]
            avg = filt.mean()
            mon_avg.append(avg)
        month_series = pd.Series(mon_avg, index = months)[m]
        df.iloc[:,x] = df.iloc[:,x] - month_series.values
    return df



mkts_dict, fao_mkts_dict = get_rice_dict()

s,e = pd.Timestamp(2007,1,1) , pd.Timestamp(2020,12,31)
def get_rice_df(mkts_dict, study_markets, min_size , s,e ):
    # dict with only fao GEIWS markets
    sample_dict = {x : mkts_dict[x] for x in mkts_dict.keys() if 
                       len(mkts_dict[x][s:e].dropna()) >= min_size }
    
    rice_dict = sample_dict
    
    rice_dataframe = pd.concat( list(rice_dict.values()), axis = 1)
    rice_dataframe.columns = list(rice_dict.keys())
    
    return rice_dataframe

minimum_size = 160



enviro_df = get_enviro_df(monthly_dev = True)

# -----------import millet---------
senegal_millet_file = 'pricedata/SenegalGEIWSMillet.csv'
millet_prices = GEIWS_prices(senegal_millet_file)
#  -------------------------------


#takes in two pandas dataframes and calculates linear regression
def regress_ts(ts1, ts2):
    index = ts1.dropna().index.intersection(ts2.dropna().index)
    x,y =  ts1[index].values, ts2[index].values
    model = LinearRegression().fit(x,y)
    m = model.coef_
    b = model.intercept_
    r_sq = model.score(x, y)
    
    return m, b, r_sq


rice_dataframe = subtract_rolling_mean(get_rice_df(fao_mkts_dict, None, 120, s, e))
#find regression of rainfall and mkt prices
for i in range(enviro_df.shape[1]):
    enviro_ts = enviro_df.iloc[:,i]
    for j in range( rice_dataframe.shape[1]):
        rice_ts = rice_dataframe.iloc[:,j]
        m, b, r_sq = regress_ts(enviro_ts, rice_ts)
        if r_sq > 0.05:
            print(enviro_ts.columns[i], rice_dataframe.columns[j])
            print('y = {}x + {}, R^2 = {}'.format(m,b, r_sq))
        
        


    
